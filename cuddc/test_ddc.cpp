#include "ddc.h"
#include <vector>
#include <complex>
#include <cassert>
#include <random>
#include <iostream>
#include <fstream>

using namespace std;

constexpr size_t N=4096;
constexpr float PI = 3.14159265358979323846;

int main()
{
    float fir_coeffs[]{-8.30829935e-05, -1.00714599e-04, -1.17997389e-04, -1.34282160e-04,
                       -1.48821308e-04, -1.60767935e-04, -1.69176312e-04, -1.73003787e-04,
                       -1.71114210e-04, -1.62282942e-04, -1.45203459e-04, -1.18495597e-04,
                       -8.07153875e-05, -3.03664859e-05, 3.40868919e-05, 1.14205597e-04,
                       2.11559855e-04, 3.27712375e-04, 4.64200435e-04, 6.22517104e-04,
                       8.04091808e-04, 1.01027046e-03, 1.24229535e-03, 1.50128515e-03,
                       1.78821509e-03, 2.10389778e-03, 2.44896483e-03, 2.82384948e-03,
                       3.22877068e-03, 3.66371865e-03, 4.12844236e-03, 4.62243896e-03,
                       5.14494559e-03, 5.69493352e-03, 6.27110495e-03, 6.87189251e-03,
                       7.49546162e-03, 8.13971567e-03, 8.80230422e-03, 9.48063398e-03,
                       1.01718828e-02, 1.08730165e-02, 1.15808079e-02, 1.22918593e-02,
                       1.30026263e-02, 1.37094443e-02, 1.44085572e-02, 1.50961464e-02,
                       1.57683630e-02, 1.64213591e-02, 1.70513210e-02, 1.76545022e-02,
                       1.82272565e-02, 1.87660701e-02, 1.92675941e-02, 1.97286744e-02,
                       2.01463811e-02, 2.05180355e-02, 2.08412357e-02, 2.11138784e-02,
                       2.13341797e-02, 2.15006913e-02, 2.16123148e-02, 2.16683120e-02,
                       2.16683120e-02, 2.16123148e-02, 2.15006913e-02, 2.13341797e-02,
                       2.11138784e-02, 2.08412357e-02, 2.05180355e-02, 2.01463811e-02,
                       1.97286744e-02, 1.92675941e-02, 1.87660701e-02, 1.82272565e-02,
                       1.76545022e-02, 1.70513210e-02, 1.64213591e-02, 1.57683630e-02,
                       1.50961464e-02, 1.44085572e-02, 1.37094443e-02, 1.30026263e-02,
                       1.22918593e-02, 1.15808079e-02, 1.08730165e-02, 1.01718828e-02,
                       9.48063398e-03, 8.80230422e-03, 8.13971567e-03, 7.49546162e-03,
                       6.87189251e-03, 6.27110495e-03, 5.69493352e-03, 5.14494559e-03,
                       4.62243896e-03, 4.12844236e-03, 3.66371865e-03, 3.22877068e-03,
                       2.82384948e-03, 2.44896483e-03, 2.10389778e-03, 1.78821509e-03,
                       1.50128515e-03, 1.24229535e-03, 1.01027046e-03, 8.04091808e-04,
                       6.22517104e-04, 4.64200435e-04, 3.27712375e-04, 2.11559855e-04,
                       1.14205597e-04, 3.40868919e-05, -3.03664859e-05, -8.07153875e-05,
                       -1.18495597e-04, -1.45203459e-04, -1.62282942e-04, -1.71114210e-04,
                       -1.73003787e-04, -1.69176312e-04, -1.60767935e-04, -1.48821308e-04,
                       -1.34282160e-04, -1.17997389e-04, -1.00714599e-04, -8.30829935e-05};


    DDCResources* res= init_ddc_resources(4096, 8192, 8, 16, fir_coeffs);

    std::mt19937 gen(std::random_device{}());
    std::normal_distribution<float> dist(0.0, 1.0);

    std::vector<int16_t> indata(N);

    std::vector<std::complex<float>> outdata(calc_output_size(res));
    int cnt = 0;

    for (int i = 0;; ++i)
    {
        for (int j = 0; j < N; ++j)
        {
            float num = dist(gen);
            indata[j] = num*1024;
        }
        auto err = ddc(indata.data(), 1024, res);
        assert(err >= 0);
        if (err == 1)
        {
            fetch_output((fcomplex*)outdata.data(), res);
            if (cnt++ == 10)
            {
                break;
            }
        }
    }

    ofstream ofs("filtered.dat");

    for (int i = 0; i < N / 8; ++i)
    {
        std::cout << outdata[i] << std::endl;
    }

    ofs.write((char *)outdata.data(), outdata.size() * sizeof(float) * 2);

    free_ddc_resources(res);
}
